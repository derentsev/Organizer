//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Organizer.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OrganizerDBEntities : DbContext
    {
        public OrganizerDBEntities()
            : base("name=OrganizerDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUsersExt> AspNetUsersExts { get; set; }
        public virtual DbSet<task_table> task_table { get; set; }
        public virtual DbSet<team_table> team_table { get; set; }
    
        public virtual int CreateTask(string title, string taskSubject, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> creatorID, Nullable<byte> taskPriority, Nullable<bool> isDeleted, Nullable<bool> isFinished, Nullable<System.DateTime> taskCreationDate)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var taskSubjectParameter = taskSubject != null ?
                new ObjectParameter("TaskSubject", taskSubject) :
                new ObjectParameter("TaskSubject", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var creatorIDParameter = creatorID.HasValue ?
                new ObjectParameter("CreatorID", creatorID) :
                new ObjectParameter("CreatorID", typeof(int));
    
            var taskPriorityParameter = taskPriority.HasValue ?
                new ObjectParameter("TaskPriority", taskPriority) :
                new ObjectParameter("TaskPriority", typeof(byte));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isFinishedParameter = isFinished.HasValue ?
                new ObjectParameter("IsFinished", isFinished) :
                new ObjectParameter("IsFinished", typeof(bool));
    
            var taskCreationDateParameter = taskCreationDate.HasValue ?
                new ObjectParameter("TaskCreationDate", taskCreationDate) :
                new ObjectParameter("TaskCreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTask", titleParameter, taskSubjectParameter, startDateParameter, endDateParameter, creatorIDParameter, taskPriorityParameter, isDeletedParameter, isFinishedParameter, taskCreationDateParameter);
        }
    
        public virtual int CreateTeam(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTeam", nameParameter);
        }
    
        public virtual int CreateUser(string newUserName, string email)
        {
            var newUserNameParameter = newUserName != null ?
                new ObjectParameter("NewUserName", newUserName) :
                new ObjectParameter("NewUserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUser", newUserNameParameter, emailParameter);
        }
    
        public virtual int DeleteTaskByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTaskByID", iDParameter);
        }
    
        public virtual int DeleteTaskByTitle(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTaskByTitle", titleParameter);
        }
    
        public virtual int DeleteTeamByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeamByID", iDParameter);
        }
    
        public virtual int DeleteTeamByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeamByName", nameParameter);
        }
    
        public virtual int DeleteTeamTask(Nullable<int> teamID, Nullable<int> taskID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeamTask", teamIDParameter, taskIDParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", iDParameter);
        }
    
        public virtual int DeleteUserTask(string userID, Nullable<int> task)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserTask", userIDParameter, taskParameter);
        }
    
        public virtual int DeleteUserTeam(string userID, Nullable<int> teamID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserTeam", userIDParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<GetAllTasks_Result> GetAllTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTasks_Result>("GetAllTasks");
        }
    
        public virtual ObjectResult<string> GetAllTeams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllTeams");
        }
    
        public virtual ObjectResult<GetTaskByID_Result> GetTaskByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskByID_Result>("GetTaskByID", iDParameter);
        }
    
        public virtual ObjectResult<string> GetTeamByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetTeamByID", iDParameter);
        }
    
        public virtual ObjectResult<GetUserById_Result> GetUserById(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserById_Result>("GetUserById", iDParameter);
        }
    
        public virtual int InsertTeamTask(Nullable<int> teamID, Nullable<int> taskID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTeamTask", teamIDParameter, taskIDParameter);
        }
    
        public virtual int InsertUserTask(string userID, Nullable<int> taskID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserTask", userIDParameter, taskIDParameter);
        }
    
        public virtual int InsertUserTeam(string userID, Nullable<int> teamID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserTeam", userIDParameter, teamIDParameter);
        }
    
        public virtual int UpdateTaskByID(Nullable<int> iD, string title, string taskSubject, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> creatorID, Nullable<byte> taskPriority, Nullable<bool> isDeleted, Nullable<bool> isFinished, Nullable<System.DateTime> taskCreationDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var taskSubjectParameter = taskSubject != null ?
                new ObjectParameter("TaskSubject", taskSubject) :
                new ObjectParameter("TaskSubject", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var creatorIDParameter = creatorID.HasValue ?
                new ObjectParameter("CreatorID", creatorID) :
                new ObjectParameter("CreatorID", typeof(int));
    
            var taskPriorityParameter = taskPriority.HasValue ?
                new ObjectParameter("TaskPriority", taskPriority) :
                new ObjectParameter("TaskPriority", typeof(byte));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isFinishedParameter = isFinished.HasValue ?
                new ObjectParameter("IsFinished", isFinished) :
                new ObjectParameter("IsFinished", typeof(bool));
    
            var taskCreationDateParameter = taskCreationDate.HasValue ?
                new ObjectParameter("TaskCreationDate", taskCreationDate) :
                new ObjectParameter("TaskCreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTaskByID", iDParameter, titleParameter, taskSubjectParameter, startDateParameter, endDateParameter, creatorIDParameter, taskPriorityParameter, isDeletedParameter, isFinishedParameter, taskCreationDateParameter);
        }
    
        public virtual int UpdateTeamByID(string name, Nullable<int> iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTeamByID", nameParameter, iDParameter);
        }
    
        public virtual int UpdateUserEmail(Nullable<int> iD, string email)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserEmail", iDParameter, emailParameter);
        }
    
        public virtual int UpdateUserNameByID(Nullable<int> iD, string newUserName)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var newUserNameParameter = newUserName != null ?
                new ObjectParameter("NewUserName", newUserName) :
                new ObjectParameter("NewUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserNameByID", iDParameter, newUserNameParameter);
        }
    
        public virtual int UpdateUserPhone(Nullable<int> iD, string phoneNumber)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPhone", iDParameter, phoneNumberParameter);
        }
    }
}
